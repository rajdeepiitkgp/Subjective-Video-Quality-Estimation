# -*- coding: utf-8 -*-
"""mtpnn.ipynb

Automatically generated by Colaboratory.

"""


import tensorflow as tf
import keras
from keras import optimizers
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping,ModelCheckpoint
import pandas as pd
import numpy as np
from matplotlib.pyplot import figure, show
from sklearn import metrics
import keras.backend as K

rmse_val=[]
acc_val=[]

def rmse(y_true, y_pred):
  return K.sqrt(K.mean((y_true-y_pred)**2))
def accur(y_true, y_pred):
  z=rmse(y_true, y_pred)
  rmse_val.insert(len(rmse_val),z)
  acc_val.insert(len(acc_val),(1-z)*100)
  return (1-z)*100

mos =pd.read_excel('feature_dataset.xlsx',header=None, skiprows=1)

mos_x=mos.iloc[:,:-1]
mos_y=mos.iloc[:,-1]

mos_x_train, mos_x_test, mos_y_train, mos_y_test = train_test_split(mos_x,mos_y,test_size=0.2,random_state=42)



mean_x=mos_x_train.mean()
var_x=mos_x_train.var()
mean_y=mos_y_train.mean()
var_y=mos_y_train.var()
x_train=(mos_x_train-mean_x)/var_x
x_test=(mos_x_test-mean_x)/var_x
y_train=(mos_y_train-mean_y)/var_y
y_test=(mos_y_test-mean_y)/var_y



#NN model best
model = Sequential()
model.add(Dense(8, input_dim=x_train.shape[1], activation='tanh'))
model.add(Dense(8, activation='tanh'))
model.add(Dense(1))
#keras.optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
keras.optimizers.Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=1e-6, amsgrad=False)
model.compile(loss='mean_squared_error',optimizer='adam',metrics=['mse',rmse,accur])



model.summary()

model.fit(x_train,y_train,epochs=5000,validation_data=(x_test,y_test))

model.evaluate(x_test,y_test)





